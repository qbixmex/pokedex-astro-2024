---
import type { GetStaticPaths } from "astro";
import type { PokemonList } from "@interfaces/index";
import MainLayout from "@layouts/main-layout.astro";
import { capitalize } from "@utils/helpers";
import { Divider, PokemonCard } from '@components/index';
import Heading from "@components/shared/heading.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {

  const result = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
  const { results } = await result.json() as PokemonList;

  return results.map((pokemon) => {
    const pokemonId = pokemon.url.split('/').at(-2);
    return {
      params: { id: pokemonId },
      props: {
        name: pokemon.name,
        url: pokemon.url,
      },
    };
  });

}) satisfies GetStaticPaths;

type Props = {
  name: string;
  url: string;
};

const { name, url } = Astro.props;
const id = url.split("/").at(-2);
const pokemonCapitalized = capitalize(name);
---

<MainLayout
  pageTitle={`${pokemonCapitalized} Pokemon`}
  metaDescription={`A detailed view of the "${pokemonCapitalized}" pokemon character`}
  metaRobots="index, follow"
>
  <div class="mainWrapper">
    <div class="flex justify-center items-center gap-4 mt-8">
      <Heading>{pokemonCapitalized}</Heading>

      <button id="favorite" data-name={name} data-id={id}>
        <Icon
          class="favoriteIcon"
          name="heart-outline"
          size={50}
          data-heart-outline-icon
        />
        <Icon
          class="favoriteIcon hidden"
          name="heart-filled"
          size={50}
          data-heart-filled-icon
        />
      </button>
    </div>

    <Divider />

    <section id="content">
      <PokemonCard
        name={pokemonCapitalized}
        url={url}
        cssClasses="mb-5"
        isForPageDetails
        playAudio
      />

      <button onclick="history.back()" class="backButton">
        Back
      </button>
    </section>
  </div>
</MainLayout>

<script>
  type FavoritePokemon = {
    id: string;
    name: string;
  };

  const pokemonKeyStorage = "favorite-pokemons";

  const handlePageLoad = () => {

    let favoritePokemons: FavoritePokemon[] = JSON.parse(localStorage.getItem(pokemonKeyStorage) ?? "[]");

    const btnFavorite = document.getElementById("favorite") as HTMLButtonElement | null;

    if (btnFavorite) {
      const favoritePokemon: FavoritePokemon = {
        id: btnFavorite.dataset.id ?? "undefined-id",
        name: btnFavorite.dataset.name ?? "undefined-name",
      };

      const isFavorite = favoritePokemons.some((item) => item.id === favoritePokemon.id);

      const heartOutlineIcon = btnFavorite.querySelector("[data-heart-outline-icon]") as HTMLElement | null;
      const heartFilledIcon = btnFavorite.querySelector("[data-heart-filled-icon]") as HTMLElement | null;

      if (isFavorite) {
        heartOutlineIcon?.classList.add("hidden");
        heartFilledIcon?.classList.remove("hidden");
      }

      const toggleFavoritePokemon = () => {
        if (isFavorite) {
          // Remove Pokemon from favorites if it's already there
          favoritePokemons = favoritePokemons.filter((item) => item.id !== favoritePokemon.id);
        } else {
          // Add Pokemon to favorites if it's not there
          favoritePokemons.push(favoritePokemon);
        }

        localStorage.setItem(pokemonKeyStorage, JSON.stringify(favoritePokemons));
      };
    
      btnFavorite.addEventListener("click", () => {
        heartOutlineIcon?.classList.toggle("hidden");
        heartFilledIcon?.classList.toggle("hidden");
        toggleFavoritePokemon();
      });
    };
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  .mainWrapper {
    @apply container mx-auto px-5 lg:px-0;
  }
  #content {
    @apply w-full mx-auto md:max-w-[600px];
  }
  .favoriteIcon {
    @apply text-red-500;
  }
  .backButton {
    @apply bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded transition-colors;
  }
</style>